#
# IMPORTANT NOTE
#
# This chart inherits from our common library chart. You can check the default values/options here:
# https://github.com/k8s-at-home/library-charts/tree/main/charts/stable/common/values.yaml
#
controller:
  # -- enable the controller.
  enabled: true
  # -- Set the controller type.
  # Valid options are deployment, daemonset or statefulset
  type: deployment
  # -- Set annotations on the deployment/statefulset/daemonset
  annotations: {}
  # -- Set labels on the deployment/statefulset/daemonset
  labels: {}
  # -- Number of desired pods
  replicas: "1"
  # -- Set the controller upgrade strategy
  # For Deployments, valid values are Recreate (default) and RollingUpdate.
  # For StatefulSets, valid values are OnDelete and RollingUpdate (default).
  # DaemonSets ignore this.
  strategy:
  rollingUpdate:
    # -- Set deployment RollingUpdate max unavailable
    unavailable:
    # -- Set deployment RollingUpdate max surge
    surge:
    # -- Set statefulset RollingUpdate partition
    partition:
  # -- ReplicaSet revision history limit
  revisionHistoryLimit: 3
  # -- Set statefulset podManagementPolicy, valid values are Parallel and OrderedReady (default).
  # podManagementPolicy:

image:
  # -- image repository
  repository: ghcr.io/miguelndecarvalho/speedtest-exporter
  # -- image tag
  tag: v3.5.4
  # -- image pull policy
  pullPolicy: IfNotPresent

# -- environment variables. See [application docs](https://docs.miguelndecarvalho.pt/projects/speedtest-exporter/) for more details.
# @default -- See below
env:
  # -- Set the container timezone
  TZ: Asia/Tokyo

# -- Add a Horizontal Pod Autoscaler
# @default -- <disabled>
autoscaling:
  enabled: false
  target:  # deploymentname
  minReplicas:  2
  maxReplicas:  6
  targetCPUUtilizationPercentage:  150
  targetMemoryUtilizationPercentage:  150

# -- Configures service settings for the chart.
# @default -- See values.yaml
service:
  main:
    ports:
      http:
        enabled: false
      metrics:
        enabled: true
        protocol: TCP
        port: 9798

# -- Set the resource requests / limits for the main container.
resources:
  ## We usually recommend not to specify default resources and to leave this as a conscious
  ## choice for the user. This also increases chances charts run on environments with little
  ## resources, such as Minikube. If you do want to specify resources, uncomment the following
  ## lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  requests:
    cpu: 20m
    memory: 32Mi

metrics:
  # -- Enable and configure a Prometheus serviceMonitor for the chart under this key.
  # @default -- See values.yaml
  enabled: true
  serviceMonitor:
    # -- The interval field must use minutes for the padding to calculate properly.
    interval: 5m
    scrapeTimeout: 1m
    labels: {}
  # -- Enable and configure Prometheus Rules for the chart under this key.
  # @default -- See values.yaml
  prometheusRule:
    enabled: true
    # -- Download speed you want alerts to be triggered in Mbps
    downloadLimit: 400
    # -- Upload speed you want alerts to be triggered in Mbps
    uploadLimit: 400
    # -- Ping latency you want alerts to be triggered in ms
    pingLimit: 20
    # -- Jitter latency you want alerts to be triggered in ms
    jitterLimit: 30
    labels: {}
    # -- Configure additionial rules for the chart under this key.
    # @default -- See prometheusrules.yaml
    rules:
      - alert: SpeedtestSlowInternetDownload
        annotations:
          description: Internet download speed is averaging {{ humanize $value }} Mbps.
          summary: SpeedTest slow internet download.
        expr: |
          avg_over_time(speedtest_download_bits_per_second{job=~".*speedtest-exporter.*"}[4h])
            < 250
        for: 0m
        labels:
          severity: warning
      - alert: SpeedtestSlowInternetDownload
        annotations:
          description: Internet download speed is averaging {{ humanize $value }} Mbps.
          summary: SpeedTest slow internet download.
        expr: |
          avg_over_time(speedtest_download_bits_per_second{job=~".*speedtest-exporter.*"}[4h])
            < 200
        for: 0m
        labels:
          severity: critical

